class Rackets {
    field int left_y, left_x, right_y, right_x;  // координаты центров левой и правой ракетки
    field int w, h, w2, h2; // ширина и высота ракеток
    field int speed; // скорость ракеток (в пикселях за кадр)
    field int min_y, max_y; // крайние координаты, на которые можно сдвинуть ракетку

    constructor Rackets new() {
        let speed = 3;

        let w = 8;
        let h = 50;
        let w2 = w / 2; // половины ширины и высоты (часто используются, так что пусть хранятся в переменной, а не считаются отдельно каждый раз)
        let h2 = h / 2;
        

        let left_y = 256 / 2;
        let right_y = 256 / 2;
        
        let left_x = 10 + (w / 2);
        let right_x = 512 - 10 - (w / 2); 

        let min_y = h2;
        let max_y = 255 - h2 - 1;
        
        return this;
    }

    method int get_right_surface_x() { // возвращает x-координату поверхности правой ракетки (от которой отскакивает мячик)
        return right_x - w2;
    }
    method int get_left_surface_x() { // возвращает x-координату поверхности правой ракетки (от которой отскакивает мячик)
        return left_x + w2;
    }
    method int get_right_y() {
        return right_y;
    }
    method int get_right_top() {
        return right_y - h2;
    }
    method int get_right_bot() {
        return right_y + h2;
    }
    method int get_left_y() {
        return left_y;
    }
    method int get_left_top() {
        return left_y - h2;
    }
    method int get_left_bot() {
        return left_y + h2;
    }
    

    method void draw_left() {
        do Screen.drawRectangle(left_x - w2, left_y - h2, left_x + w2, left_y + h2);
        return;
    }
    method void draw_right() {
        do Screen.drawRectangle(right_x - w2, right_y - h2, right_x + w2, right_y + h2);
        return;
    }
    
    method void clear_left() {
        do Screen.setColor(false);
        do draw_left();
        do Screen.setColor(true);
        return;
    }
    method void clear_right() {
        do Screen.setColor(false);
        do draw_right();
        do Screen.setColor(true);
        return;
    }


    method void update() {
        var int pressed_key;
        let pressed_key = Keyboard.keyPressed();
        if (pressed_key = 131) {
            do clear_right();
            let right_y = Math.max(min_y, right_y - speed);
            do draw_right();
        }
        if (pressed_key = 133) {
            do clear_right();
            let right_y = Math.min(max_y, right_y + speed);
            do draw_right();
        }
        if (pressed_key = 87) {  // w
            do clear_left();
            let left_y = Math.max(min_y, left_y - speed);
            do draw_left();
        }
        if (pressed_key = 83) {  // s
            do clear_left();
            let left_y = Math.min(max_y, left_y + speed);
            do draw_left();
        }
        return;
    }

    method void draw_net() {
        var int y;
        var int step;
        let y = 0;
        let step = 5;
        while (y + step < 255) {
            do Screen.drawLine(512 / 2, y, 512 / 2, y + step);
            let y = y + (step * 2);
        }
        return;
    }
}